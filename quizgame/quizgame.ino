#include <memorysaver.h>
#include <UTFT.h>

#define button1 22
#define button2 24
#define button3 26
#define button4 28

const unsigned short gameover[900] PROGMEM = {
    0xFFDF, 0xFFDF, 0xF79E, 0xEF7D, 0xF7BE, 0xFFFF, 0xFFDF, 0xEF7D, 0xC7D8, 0xFF5F, 0xFFFF, 0xD7FB, 0xE75F, 0xFF5E, 0xEFFD, 0xFFBF, // 0x0010 (16) pixels
    0xFF1F, 0xE75A, 0xDFFB, 0xFF7F, 0xFEFF, 0xEFDE, 0xEF7B, 0xF7FF, 0xFFFF, 0xF7BE, 0xF79E, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, // 0x0020 (32) pixels
    0xF7BE, 0xEF7D, 0xF79E, 0xFFFF, 0xFFDF, 0xF79E, 0xEF7D, 0xEF9C, 0xFFBF, 0xFFBF, 0xD79B, 0xE77C, 0xFFDF, 0xEFFE, 0xC7DC, 0xEF5E, // 0x0030 (48) pixels
    0xFFDF, 0xFFFE, 0xE7DD, 0xCF5D, 0xEF5F, 0xF7FF, 0xFFDF, 0xF7BE, 0xF79E, 0xF79E, 0xFFDF, 0xFFFF, 0xF79E, 0xF7BE, 0xFFDF, 0xFFFF, // 0x0040 (64) pixels
    0xF7BE, 0xF79E, 0xF79E, 0xFFDF, 0xFFDF, 0xFFDF, 0xFF5F, 0xFEBE, 0xFF5E, 0xFFDF, 0xF77D, 0xF7BC, 0xF7FE, 0xEF7E, 0xF77F, 0xF7FF, // 0x0050 (80) pixels
    0xEFFD, 0xFF9D, 0xFFBF, 0xFF3E, 0xEF7D, 0xFFDF, 0xFFFF, 0xF7BE, 0xF79E, 0xF7BE, 0xEF7D, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0xE73C, // 0x0060 (96) pixels
    0xEF5D, 0xFFFF, 0xFFFD, 0xBF99, 0xDF9C, 0xEF7E, 0xFF9F, 0xF7FF, 0xEF5D, 0xFF9C, 0xFF9E, 0xFFDF, 0xF7BF, 0xCF5A, 0xB736, 0xFFDC, // 0x0070 (112) pixels
    0xFFFF, 0xFE9D, 0xEF5D, 0xFFDF, 0xFFFF, 0xFFDF, 0xEF7D, 0xE73C, 0xF7BE, 0xF79E, 0xF7BE, 0xFFFF, 0xFFDF, 0xEF7D, 0xF79E, 0xFFFF, // 0x0080 (128) pixels
    0xBEF8, 0x2648, 0xAFD8, 0xEFFF, 0xEFFC, 0xD7FF, 0xFEFF, 0xDFDB, 0xD7D9, 0xFF9F, 0xFFBF, 0x9711, 0x368B, 0xDF5C, 0xE7FF, 0xF7BC, // 0x0090 (144) pixels
    0xF7BE, 0xF7BE, 0xFFDF, 0xFFDF, 0xF79E, 0xEF5D, 0xFFFF, 0xFFFF, 0xEF7D, 0xE71C, 0xEF7D, 0xFFFF, 0xFFFF, 0xF79E, 0xCF38, 0x6ECE, // 0x00A0 (160) pixels
    0xB7B4, 0xA796, 0xE719, 0xEFDF, 0xFF5F, 0xFFBF, 0xFFDD, 0xDF19, 0xAF96, 0xAF93, 0x7752, 0xE73C, 0xD7BE, 0xFFFF, 0xFFFF, 0xF79E, // 0x00B0 (176) pixels
    0xEF5D, 0xF79E, 0xFFDF, 0xFFFF, 0xFFDF, 0xFFDF, 0xF79E, 0xEF5D, 0xF79E, 0xFFFF, 0xFFFF, 0xEF7D, 0xFFFD, 0xF7FE, 0xB751, 0x2E67, // 0x00C0 (192) pixels
    0xEEBA, 0xF7FF, 0xFFFB, 0xFFBF, 0xFF7F, 0xA6F1, 0x1F07, 0xC775, 0xDFFD, 0xFF7C, 0xE7BC, 0xFF7F, 0xFFFF, 0xF79E, 0xEF7D, 0xF79E, // 0x00D0 (208) pixels
    0xFFDF, 0xFFFF, 0xEF7D, 0xF79E, 0xFFDF, 0xFFFF, 0xFFFF, 0xEF7D, 0xEF7D, 0xFFDF, 0xD73E, 0xA738, 0x766C, 0x06C6, 0x9FB4, 0x9FB8, // 0x00E0 (224) pixels
    0xB6B5, 0x9776, 0xA73C, 0xA773, 0x06C4, 0x8EED, 0x9F98, 0xF73F, 0xFFDF, 0xEF5C, 0xEF5D, 0xF7BE, 0xFFFF, 0xFFDF, 0xF7BE, 0xF7BE, // 0x00F0 (240) pixels
    0xF73D, 0xEF7D, 0xFFDF, 0xFFFF, 0xEFBF, 0xD79F, 0xFF3F, 0xE7FF, 0xC7D8, 0x0720, 0x06E6, 0x2708, 0x06C0, 0x0740, 0x0F23, 0x0E80, // 0x0100 (256) pixels
    0x06C1, 0x0E85, 0x1623, 0x0F04, 0x0687, 0xF7BB, 0xFFBF, 0xE77F, 0xEF5B, 0xFFDF, 0xF7FF, 0xEFDF, 0xF71C, 0xF79D, 0xF7FF, 0xF7FF, // 0x0110 (272) pixels
    0xFFBF, 0xE75C, 0xFF9E, 0xFFFE, 0xFF5A, 0x6F11, 0x7671, 0x2644, 0x96B1, 0xAF15, 0x36CA, 0x16C9, 0x1EE8, 0x3627, 0x06E8, 0x5730, // 0x0120 (288) pixels
    0x9773, 0x5F4D, 0x06C5, 0x574C, 0x7F51, 0xF7FA, 0xFFFD, 0xFFBE, 0xE75D, 0xEFDF, 0xFF9E, 0xFFDE, 0xEFFF, 0xFFBF, 0xFF5E, 0xDF1C, // 0x0130 (304) pixels
    0xFFDE, 0xEFFA, 0xC7D3, 0x0F28, 0x0727, 0x1724, 0x9771, 0x97B5, 0x370D, 0x06A9, 0x0764, 0x0EE7, 0x06C6, 0x5F2D, 0xAF95, 0x76F0, // 0x0140 (320) pixels
    0x0727, 0x0766, 0x06EA, 0xCFFA, 0xE7FC, 0xF7BD, 0xDF3C, 0xE7BE, 0xFFBF, 0xFFFF, 0xF77E, 0xFF3D, 0xFF5F, 0xF77F, 0xEFBC, 0x672F, // 0x0150 (336) pixels
    0x46A9, 0x06E6, 0x0688, 0x06A5, 0x2ECC, 0x26ED, 0x266D, 0x1E09, 0x0745, 0x170A, 0x0E88, 0x26A8, 0x3ECD, 0x262B, 0x06A6, 0x16A5, // 0x0160 (352) pixels
    0x0665, 0x46CA, 0x9EF5, 0xF7DD, 0xF7BF, 0xE7BE, 0xF75D, 0xFFBE, 0xF75C, 0xEF7B, 0xFFBF, 0xFFBF, 0xDFBD, 0x06AA, 0x2669, 0x7711, // 0x0170 (368) pixels
    0x66EF, 0x1686, 0x0EE8, 0x0726, 0x1707, 0x3666, 0x1F23, 0x1EA8, 0x06E7, 0x0743, 0x0745, 0x0708, 0x16C8, 0x96B0, 0x6772, 0x1686, // 0x0180 (384) pixels
    0x6E30, 0xF7FD, 0xFFDF, 0xEFDF, 0xEF3D, 0xFF7D, 0xEFFE, 0xDFFC, 0xE7FE, 0xFF9F, 0xE7FF, 0x0F4C, 0x6750, 0xFF7D, 0x9F72, 0x1662, // 0x0190 (400) pixels
    0x16E5, 0x0703, 0x0721, 0x06A1, 0x06C0, 0x0E04, 0x0663, 0x0EC0, 0x1682, 0x0F06, 0x0685, 0xD6DA, 0xD7FF, 0x1E69, 0x66D0, 0xFFFC, // 0x01A0 (416) pixels
    0xFF9F, 0xEFDF, 0xF7BF, 0xFF9E, 0xF7FF, 0xF7FE, 0xE7DD, 0xF73F, 0xF7BC, 0x16E9, 0x6F0E, 0xFF3E, 0xBF57, 0x1E24, 0x7F32, 0x9715, // 0x01B0 (432) pixels
    0x7771, 0x7F53, 0x8794, 0x9F76, 0x86F5, 0x7F12, 0x96B3, 0x674D, 0x06E2, 0xE7BA, 0xF7FF, 0x26A3, 0x6731, 0xFFFC, 0xFF1D, 0xEFBF, // 0x01C0 (448) pixels
    0xFFFF, 0xFFDF, 0xFFBF, 0xFFBE, 0xFF9D, 0xFF5F, 0xFFDB, 0x2686, 0x5F0C, 0xDFDE, 0xAF74, 0x0660, 0xBFF9, 0xFF7F, 0xFFDC, 0xFFBE, // 0x01D0 (464) pixels
    0xFFFF, 0xFFFD, 0xFF7D, 0xE7DE, 0xFF7F, 0xBF93, 0x0701, 0xCFB9, 0xD75F, 0x1EC6, 0x5F10, 0xFFDB, 0xFEDC, 0xE79F, 0xF7FF, 0xFFFF, // 0x01E0 (480) pixels
    0xEF7D, 0xFF7D, 0xF7FF, 0xFFBF, 0xE7FE, 0xDE99, 0xCF5A, 0xF7FE, 0xD7FA, 0xC759, 0xAEF7, 0x8F13, 0xA755, 0xB657, 0xEFBE, 0xD77A, // 0x01F0 (496) pixels
    0x9F55, 0x9F34, 0xAF75, 0xA6F6, 0xCF3C, 0xEF7E, 0xE7FD, 0xA796, 0xE73C, 0xEF7D, 0xFFFE, 0xF7BE, 0xF77D, 0xEF5D, 0xEF7D, 0xF73D, // 0x0200 (512) pixels
    0xEFDE, 0xFF9E, 0xEFFE, 0xF73C, 0xE7BD, 0xFFFF, 0xFF5F, 0xFF7F, 0x8EF0, 0x0EA0, 0x06E0, 0x26E7, 0xCFD9, 0xFEBB, 0x26C0, 0x06C0, // 0x0210 (528) pixels
    0x06C1, 0xC771, 0xFF3B, 0xD7FF, 0xFF9F, 0xFF5F, 0xEF7D, 0xF7BE, 0xFFFF, 0xFFBE, 0xEF7D, 0xE73C, 0xFFFF, 0xFFDF, 0xF7DF, 0xFF9F, // 0x0220 (544) pixels
    0xEFBE, 0xFFBF, 0xF7BE, 0xF77E, 0xE7DC, 0xEFFF, 0xE7BD, 0xDFB9, 0xD778, 0xCF5B, 0xEFFF, 0xE7BB, 0xDF3A, 0xEF3A, 0xB799, 0xFF9E, // 0x0230 (560) pixels
    0xFF5F, 0xE7FF, 0xFF9F, 0xCF9B, 0xEF9E, 0xF7BE, 0xF79E, 0xFFBE, 0xFFBE, 0xFFBF, 0xFFDF, 0xFFBF, 0xEF9D, 0xEF7D, 0xEF7D, 0xFFFF, // 0x0240 (576) pixels
    0xFFFF, 0xF77E, 0xF7B8, 0xEFFE, 0xE7FF, 0xF7FF, 0xF79F, 0xEF3F, 0xFFDF, 0xFFFD, 0xF79F, 0xD73E, 0xEFFF, 0xF7DF, 0xFFFF, 0xE79D, // 0x0250 (592) pixels
    0xEF9D, 0xFFFE, 0xF7FF, 0xF7FF, 0xEF5D, 0xFFBF, 0xFFDF, 0xFFFF, 0xFFDF, 0xFFFF, 0xF7DE, 0xDF9C, 0xE77B, 0xEFFD, 0xF7FE, 0xE79D, // 0x0260 (608) pixels
    0xD75E, 0xFFBF, 0xFF9F, 0xFF9C, 0xD779, 0xCFBC, 0xE7FE, 0xF7DC, 0xFEFB, 0xF73C, 0xF77E, 0xFFDF, 0xFFFF, 0xCEDB, 0xEF5E, 0xFF5F, // 0x0270 (624) pixels
    0xD7DB, 0xDFDC, 0xD71A, 0xFFDF, 0xFFDF, 0xFFDF, 0xF75E, 0xEFBE, 0xE77C, 0xAED6, 0xBED6, 0x9ED5, 0xB6D6, 0xAEF7, 0xA714, 0xCF19, // 0x0280 (640) pixels
    0xBEB8, 0x8E93, 0x9715, 0xC73B, 0xEF5D, 0xEF3A, 0x7F51, 0xBFF7, 0x56CF, 0xAFD4, 0x9F91, 0x672E, 0xD7B6, 0xC736, 0x8E93, 0xAF16, // 0x0290 (656) pixels
    0xBED7, 0xF7FE, 0xF79E, 0xF75D, 0xFF7F, 0xEFFF, 0xEFBC, 0x9715, 0xBF96, 0x7F12, 0x9F14, 0xA7D6, 0x2F27, 0x670C, 0x674C, 0x3F28, // 0x02A0 (672) pixels
    0x7FF0, 0xDF99, 0xEF7D, 0xB77A, 0xB795, 0xA7B6, 0x364F, 0xB6F5, 0xA6F3, 0x2EAF, 0xA719, 0xEF3F, 0x7EF1, 0xA775, 0xAED5, 0xEFFD, // 0x02B0 (688) pixels
    0xF79D, 0xEF3D, 0xFF9F, 0xEFFF, 0xE7DB, 0x86D2, 0xAF95, 0x568E, 0x76AF, 0x8793, 0x2ECC, 0xBF77, 0xD7B9, 0x4E2D, 0x6711, 0xD77C, // 0x02C0 (704) pixels
    0xFFDF, 0xCF9A, 0x9714, 0xA715, 0xA716, 0x6E90, 0x6F50, 0x8731, 0xBF77, 0xE7DD, 0x8791, 0x9794, 0x9693, 0xE7FC, 0xFFDE, 0xFFFF, // 0x02D0 (720) pixels
    0xFFFF, 0xF7FF, 0xDFBC, 0xB6F8, 0xA6B7, 0xB718, 0xBF59, 0xBF38, 0x8E52, 0xC7D9, 0xCFD9, 0xA675, 0xA655, 0xCF19, 0xE7DC, 0xEFFD, // 0x02E0 (736) pixels
    0xA654, 0xB6D6, 0xD7BA, 0xD7BA, 0xCF99, 0xB6B6, 0xBEF7, 0xC758, 0xC717, 0xC717, 0xC6F8, 0xE7BC, 0xF7DE, 0xFFFF, 0xFFBF, 0xF7BE, // 0x02F0 (752) pixels
    0xEFDE, 0xEFFE, 0xE7FD, 0xDFBB, 0xE7DC, 0xF7FE, 0xDFDB, 0xE7FD, 0xE7FC, 0xE7BC, 0xEFFE, 0xF7FE, 0xF7BE, 0xF7DF, 0xEFDD, 0xEFDD, // 0x0300 (768) pixels
    0xF7FE, 0xE7BD, 0xEFFE, 0xE7DD, 0xEFFE, 0xEFDD, 0xDF9A, 0xE7FC, 0xEFDC, 0xF7FE, 0xEF7C, 0xF79E, 0xF71D, 0xEF1D, 0xF77E, 0xFFFF, // 0x0310 (784) pixels
    0xF7FE, 0xEF7C, 0xF77D, 0xFFFE, 0xFFFF, 0xF79E, 0xEF5D, 0xFFBF, 0xFFFF, 0xFFDF, 0xEF3E, 0xEF3E, 0xFFFF, 0xFFDF, 0xF7BF, 0xEF3D, // 0x0320 (800) pixels
    0xF79E, 0xFFDF, 0xFFFF, 0xF79E, 0xEF9D, 0xFFFF, 0xFFFF, 0xF7FE, 0xEF5D, 0xF79E, 0xF75E, 0xFFBF, 0xFFDF, 0xF79E, 0xF77E, 0xFF9E, // 0x0330 (816) pixels
    0xFF9E, 0xFF9E, 0xF77E, 0xFF7E, 0xFF7E, 0xF77E, 0xFF9F, 0xFF9F, 0xFF9F, 0xF77F, 0xFF9F, 0xFF9F, 0xFF9F, 0xFF7E, 0xFF7F, 0xF77E, // 0x0340 (832) pixels
    0xFF9F, 0xFF7F, 0xFFBF, 0xFFBF, 0xF79E, 0xF79E, 0xF7BE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF9E, 0xEF9E, 0xFFFF, 0xFFFF, 0xF75D, // 0x0350 (848) pixels
    0xF77D, 0xFFDE, 0xFFFF, 0xF79E, 0xEF5D, 0xF7BE, 0xFFFF, 0xFFFF, 0xEF7D, 0xEF7D, 0xF7BE, 0xFFFF, 0xFFDF, 0xEF7D, 0xEF7D, 0xFFFF, // 0x0360 (864) pixels
    0xFFDF, 0xFF9F, 0xF75E, 0xF79E, 0xFFFF, 0xFFFF, 0xF7FF, 0xF7FF, 0xEFBE, 0xE79D, 0xEFBE, 0xFFFF, 0xF7DF, 0xE75D, 0xF7BE, 0xF7BD, // 0x0370 (880) pixels
    0xFFFE, 0xF7DE, 0xEF7C, 0xEF7C, 0xF7DE, 0xF7FE, 0xEF7D, 0xE75C, 0xE75C, 0xFFFF, 0xF7DE, 0xEF7D, 0xE77C, 0xFFFE, 0xFFFF, 0xF77E, // 0x0380 (896) pixels
};

const unsigned short trophy[225] PROGMEM = {
    0xFFFF, 0xEF7F, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFDF, 0xFFDF, 0xFFDF, 0xFFBF, 0xFF9F, 0xFFFF, 0xF79F, 0xFFFF, 0xFFFF, 0xFFFF, // 0x0010 (16) pixels
    0xFFFF, 0xF79E, 0xE73B, 0x9CCF, 0xC613, 0xAD2E, 0xAD2F, 0xB570, 0xB551, 0xA511, 0xEF3B, 0xFFFF, 0xF7BE, 0xFFDF, 0xEF7F, 0xEF3E, // 0x0020 (32) pixels
    0xE71B, 0x9CCD, 0xB58B, 0xD6CC, 0xCE67, 0xE749, 0xCE66, 0xDECA, 0x9CE6, 0x9489, 0xF779, 0xFFDD, 0xE73D, 0xFFDF, 0xAD35, 0xB573, // 0x0030 (48) pixels
    0x8409, 0xDECD, 0xFFEE, 0xF7C6, 0xE721, 0xFFE7, 0xEF67, 0x94A1, 0x9CA7, 0xAD2E, 0xB553, 0xFFFF, 0xFFDF, 0xAD34, 0xDEB8, 0xFF98, // 0x0040 (64) pixels
    0xBDAA, 0xFFAC, 0xFF86, 0xFFE5, 0xDEA1, 0xFFEC, 0xA4A3, 0xEEF2, 0xFF79, 0xA4B1, 0xFFFF, 0xFFFE, 0xAD74, 0x840E, 0xA4AD, 0xDE4E, // 0x0050 (80) pixels
    0xFFF0, 0xEEC4, 0xFF43, 0xFFC6, 0xEEE6, 0xACC5, 0xB50C, 0x838B, 0xB554, 0xFFFF, 0xFFFE, 0xFFFE, 0xBDB5, 0x8C0B, 0xCDEE, 0xFFCF, // 0x0060 (96) pixels
    0xF726, 0xFFE6, 0xFF65, 0xF6E7, 0xB4C7, 0xB4EE, 0xC5D5, 0xFFFF, 0xEF7C, 0xE79B, 0xFFFE, 0xFFDE, 0xE6D8, 0x5A62, 0xE68D, 0xFFAA, // 0x0070 (112) pixels
    0xF705, 0xFF88, 0xDE47, 0x3100, 0xD615, 0xFFDF, 0xFFDF, 0xFFFF, 0xEFFD, 0xF7FE, 0xF7BE, 0xFFFF, 0xCDF3, 0x5A40, 0xCDE8, 0xFFCD, // 0x0080 (128) pixels
    0xC565, 0x4160, 0xCDB1, 0xFFDF, 0xFFDF, 0xEF5F, 0xF7FF, 0xEFFD, 0xF7FF, 0xF7DF, 0xFFFF, 0xF75B, 0xDE94, 0xDE8F, 0xCDEB, 0xCDEC, // 0x0090 (144) pixels
    0xDE31, 0xFF5B, 0xFF9F, 0xFFDF, 0xFFFF, 0xF7FF, 0xF7FF, 0xF7FF, 0xF7FF, 0xFFDF, 0xFFDF, 0xFFFD, 0xBD90, 0x9449, 0xBD6F, 0xFFFB, // 0x00A0 (160) pixels
    0xFFDF, 0xF75F, 0xFFDF, 0xFFFF, 0xEFDF, 0xF7FF, 0xF7FF, 0xFFFF, 0xFFFF, 0xFFBE, 0xEF39, 0xAD2E, 0xC610, 0xA4ED, 0xD696, 0xFFFF, // 0x00B0 (176) pixels
    0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xF799, 0x9CEC, 0x94E9, 0xC66E, 0x94E8, 0x8C89, 0xFFDA, 0xFFFD, // 0x00C0 (192) pixels
    0xFFFF, 0xF7BF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFF9E, 0xFFFD, 0xFFFA, 0xA56E, 0xBDEF, 0xB5ED, 0xB5EE, 0xAD8F, 0xFFFB, 0xE739, 0xFFFE, // 0x00D0 (208) pixels
    0xFFBE, 0xEF5D, 0xFF9F, 0xFFBF, 0xFF7E, 0xFFFF, 0xFFFE, 0xFFBD, 0xFFFE, 0xF79C, 0xF79D, 0xFFBE, 0xFFFF, 0xFF9E, 0xFFFF, 0xFFDF, // 0x00E0 (224) pixels
};

const unsigned short heart[225] PROGMEM = {
    0xF800, 0x0000, 0x0000, 0xB8C6, 0xB8C6, 0xB8C6, 0x0000, 0x0000, 0x0000, 0xB8C6, 0xB8C6, 0xB8C6, 0x0000, 0x0000, 0x0000, 0x0000, // 0x0010 (16) pixels
    0xB0C5, 0xB8C6, 0xC0C6, 0xC0C6, 0xC0C6, 0xB8C6, 0xB8C5, 0xB8C6, 0xC0C6, 0xC0C6, 0xC0C6, 0xB8C6, 0xB0C5, 0x0000, 0xB8C6, 0xC0C6, // 0x0020 (32) pixels
    0xC0C6, 0xC8C6, 0xD0E6, 0xC0C6, 0xC0C6, 0xC0C6, 0xC0C6, 0xC0C6, 0xD0E6, 0xC8C6, 0xC0C6, 0xC0C6, 0xB8C6, 0xB8C6, 0xC8C6, 0xD0C6, // 0x0030 (48) pixels
    0xC0C6, 0xB8C6, 0xC0C6, 0xC0C6, 0xC8C6, 0xC0C6, 0xC0C6, 0xB8C6, 0xC0C6, 0xD0C6, 0xC8C6, 0xB8C6, 0xB8C6, 0xC8C6, 0xD0E6, 0xC0C6, // 0x0040 (64) pixels
    0xB8C6, 0xB8C6, 0xC0C6, 0xC8C6, 0xC0C6, 0xB8C6, 0xB8C6, 0xC0C6, 0xD0C6, 0xC8C6, 0xB8C6, 0xB8C6, 0xC0C6, 0xC8C6, 0xB8C6, 0xB8C6, // 0x0050 (80) pixels
    0xB8C6, 0xB8C6, 0xB8C6, 0xB8C6, 0xB8C6, 0xB8C6, 0xB8C6, 0xC8C6, 0xC0C6, 0xB8C6, 0xB8C6, 0xC8C6, 0xD0C6, 0xC0C6, 0xB8C6, 0xB8C6, // 0x0060 (96) pixels
    0xB8C6, 0xB8C6, 0xB8C6, 0xB8C6, 0xB8C6, 0xC0C6, 0xD0C6, 0xC8C6, 0xB8C6, 0xB8C6, 0xC0C6, 0xD0C6, 0xB8C6, 0xB8C6, 0xB8C6, 0xB8C6, // 0x0070 (112) pixels
    0xB8C6, 0xB8C6, 0xB8C6, 0xB8C6, 0xB8C6, 0xD0C6, 0xC0C6, 0xB8C6, 0xC0C6, 0xB8C6, 0xB8C6, 0xC0C6, 0xC0C6, 0xB8C6, 0xB8C6, 0xB8C6, // 0x0080 (128) pixels
    0xB8C6, 0xB8C6, 0xC0C6, 0xC0C6, 0xB8C6, 0xB8C6, 0xC0C6, 0x0000, 0xB8C5, 0xC0C6, 0xC8C6, 0xC8C6, 0xB8C6, 0xB8C6, 0xB8C6, 0xB8C6, // 0x0090 (144) pixels
    0xB8C6, 0xC8C6, 0xC8C6, 0xC0C6, 0xB8C5, 0x0000, 0x0000, 0xB0A5, 0xC0C6, 0xC8C6, 0xC8C6, 0xC8C6, 0xC0C6, 0xB8C6, 0xC0C6, 0xC8C6, // 0x00A0 (160) pixels
    0xC8C6, 0xC8C6, 0xC0C6, 0xB0A5, 0x0000, 0xB8C6, 0x0000, 0xB0A5, 0xB0C5, 0xC8C6, 0xC8C6, 0xC0C6, 0xC0C6, 0xC0C6, 0xC8C6, 0xC8C6, // 0x00B0 (176) pixels
    0xB0C5, 0xB0A5, 0x0000, 0xB8C6, 0xB8C6, 0xE0C6, 0xB8C6, 0xB0A5, 0xC0C6, 0xC0C6, 0xB8C6, 0xC8C6, 0xB8C6, 0xC0C6, 0xC0C6, 0xB0A5, // 0x00C0 (192) pixels
    0xB8C6, 0x0000, 0xB8C6, 0xB8C6, 0xB8C6, 0xC906, 0x0000, 0xA8A5, 0xB8C5, 0xB8C6, 0xB8C6, 0xB8C6, 0xB8C5, 0xA8A5, 0x0000, 0x0000, // 0x00D0 (208) pixels
    0xB8C6, 0xB8C5, 0x0000, 0xB124, 0xB8C6, 0xB8C6, 0x0000, 0x0000, 0xB8C6, 0xB8C6, 0xB8C6, 0x0000, 0x0000, 0xB8C6, 0xB8C6, 0xC127, // 0x00E0 (224) pixels
};

const unsigned short qicon[400] PROGMEM = {
    0x0000, 0x0000, 0xF800, 0xC980, 0x0000, 0x0000, 0xE282, 0xE240, 0xE260, 0xE282, 0xE262, 0xE260, 0xEA60, 0xEA61, 0x0000, 0x0000, // 0x0010 (16) pixels
    0xC980, 0xF800, 0x0000, 0x0000, 0x0000, 0xF800, 0xFC00, 0x0000, 0xEA82, 0xE261, 0xF281, 0xFAE5, 0xF2E5, 0xF2A3, 0xF2A3, 0xF2E5, // 0x0020 (32) pixels
    0xFAE5, 0xF281, 0xEA61, 0xE262, 0x0000, 0xFC00, 0xF800, 0x0000, 0xF800, 0xFC00, 0x0000, 0xE262, 0xEA61, 0xF2A3, 0xEA83, 0xE0E0, // 0x0030 (48) pixels
    0xE020, 0xE180, 0xE180, 0xE000, 0xE100, 0xE283, 0xF2A3, 0xEA81, 0xE262, 0x0000, 0xFC00, 0xF800, 0xCB20, 0x0000, 0xE262, 0xFA81, // 0x0040 (64) pixels
    0xEAA4, 0xE200, 0xE1C0, 0xECF2, 0xF699, 0xFF1B, 0xFF1B, 0xF679, 0xECD1, 0xE180, 0xE220, 0xEA84, 0xFA81, 0xE262, 0x0000, 0xC980, // 0x0050 (80) pixels
    0x0000, 0xEA61, 0xEA81, 0xEA84, 0xE220, 0xEAC6, 0xF6DA, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF6BA, 0xEA83, 0xE240, // 0x0060 (96) pixels
    0xEA83, 0xEA81, 0xE262, 0x0000, 0x0000, 0xE262, 0xF2A2, 0xE262, 0xE1E0, 0xF6FB, 0xFFFF, 0xFFFF, 0xFEFB, 0xF5B5, 0xF5B5, 0xFEFB, // 0x0070 (112) pixels
    0xFFFF, 0xFFFF, 0xF6BA, 0xE1A0, 0xE283, 0xF2A2, 0xE261, 0x0000, 0xE262, 0xF281, 0xE2A4, 0xE120, 0xED12, 0xFFFF, 0xFFFF, 0xF678, // 0x0080 (128) pixels
    0xE120, 0xE000, 0xE000, 0xE140, 0xF699, 0xFFFF, 0xFFFF, 0xECD1, 0xE140, 0xEAA4, 0xF281, 0xEA61, 0xE262, 0xFA81, 0xE2A4, 0xE120, // 0x0090 (144) pixels
    0xF699, 0xFFFF, 0xFF9E, 0xEB08, 0xE1E0, 0xEAE7, 0xEAE7, 0xE1A0, 0xEB8B, 0xFFDE, 0xFFFF, 0xF679, 0xE100, 0xE2A4, 0xFA81, 0xEA62, // 0x00A0 (160) pixels
    0xE261, 0xF281, 0xE262, 0xE220, 0xFF3C, 0xFFFF, 0xFEDB, 0xE1E0, 0xE284, 0xE262, 0xE262, 0xE283, 0xE240, 0xFF1C, 0xFFFF, 0xFF1C, // 0x00B0 (176) pixels
    0xE1E0, 0xEA83, 0xF281, 0xE262, 0xE261, 0xF282, 0xE240, 0xEAA4, 0xFF7D, 0xFFFF, 0xF699, 0xE180, 0xE283, 0xE262, 0xE284, 0xE2A5, // 0x00C0 (192) pixels
    0xE200, 0xF6DA, 0xFFFF, 0xFF3C, 0xE240, 0xE261, 0xF282, 0xE261, 0xEA61, 0xF282, 0xE260, 0xE282, 0xFF5D, 0xFFFF, 0xF6BA, 0xE1A0, // 0x00D0 (208) pixels
    0xE282, 0xE283, 0xE200, 0xE0C0, 0xE160, 0xFEFB, 0xFFFF, 0xFF3C, 0xE200, 0xE262, 0xF281, 0xE261, 0xE262, 0xF281, 0xE284, 0xE1A0, // 0x00E0 (224) pixels
    0xFEFB, 0xFFFF, 0xFF5C, 0xE240, 0xE2A5, 0xE240, 0xEBED, 0xF658, 0xEC0D, 0xFF7D, 0xFFFF, 0xF6BA, 0xE140, 0xEAA4, 0xF281, 0xE262, // 0x00F0 (240) pixels
    0xE262, 0xFA81, 0xE2A5, 0xE0C0, 0xF5F6, 0xFFFF, 0xFFFF, 0xED12, 0xE000, 0xE000, 0xF658, 0xFFFF, 0xFFBE, 0xFFFF, 0xFFFF, 0xF574, // 0x0100 (256) pixels
    0xE0E0, 0xE2A4, 0xFA81, 0xE262, 0xE262, 0xF281, 0xE283, 0xE200, 0xEB6A, 0xFFDE, 0xFFFF, 0xFFBE, 0xED53, 0xEB07, 0xEC6F, 0xFFBE, // 0x0110 (272) pixels
    0xFFFF, 0xFFFF, 0xFF3C, 0xE200, 0xE240, 0xE283, 0xF282, 0xE282, 0x0000, 0xE262, 0xFAA2, 0xE2A4, 0xE140, 0xECF2, 0xFFFF, 0xFFFF, // 0x0120 (288) pixels
    0xFFFF, 0xFFBE, 0xFF9E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFF7D, 0xEC2E, 0xE200, 0xF2A3, 0xE261, 0x0000, 0x0000, 0xE261, 0xEA61, 0xEA62, // 0x0130 (304) pixels
    0xE2A4, 0xE140, 0xEC4F, 0xFEFB, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF699, 0xF6DA, 0xFFFF, 0xF6BA, 0xE140, 0xEAA4, 0xEA60, 0x0000, // 0x0140 (320) pixels
    0xFB20, 0x0000, 0xEA61, 0xF281, 0xEA61, 0xE2A4, 0xE180, 0xE1A0, 0xEB8B, 0xEC4F, 0xEC4F, 0xEB8B, 0xE040, 0xE2A5, 0xF617, 0xEB6A, // 0x0150 (336) pixels
    0xF220, 0xE284, 0x0000, 0xCB20, 0xF800, 0xFAA0, 0x0000, 0xEA61, 0xEA61, 0xFA81, 0xE2A4, 0xE283, 0xE1E0, 0xE160, 0xE160, 0xE1E0, // 0x0160 (352) pixels
    0xE2A5, 0xE260, 0xF0C0, 0xEA20, 0xE284, 0x0000, 0xFC00, 0xF800, 0x0000, 0x0000, 0xFAA0, 0x0000, 0xE261, 0xE262, 0xF281, 0xFAA1, // 0x0170 (368) pixels
    0xF2A3, 0xF2C5, 0xF2C5, 0xF2A3, 0xFA80, 0xF282, 0xE2C6, 0xEAA5, 0x0000, 0xFC00, 0xF800, 0x0000, 0x0000, 0x0000, 0xF800, 0xFB20, // 0x0180 (384) pixels
    0x0000, 0x0000, 0xE262, 0xE262, 0xE261, 0xEA60, 0xE260, 0xE261, 0xE262, 0xE241, 0x0000, 0x0000, 0xCB26, 0xF800, 0x0000, 0x0000, // 0x0190 (400) pixels
};

int score = 10;
unsigned int lives = 8;
boolean special_quiz = false;
boolean gameon = true;

//String quiz = "";
//int answer;
//int answernumber;
//int number1;
//int number2;
//String operator_ = "+";

int chansor1;
int chansor2;
int chansor3;
int chansor4;

int level = 1;

int countdowntime = 4000;

extern uint8_t SmallFont[];
extern uint8_t BigFont[];
UTFT lcd(ITDB18SP, 7, 6, 5, 3, 4);
void setup()
{
  Serial.begin(115200);
  lcd.InitLCD();
  lcd.setFont(SmallFont);
  randomSeed(analogRead(15));
  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
  pinMode(button3, INPUT);
  pinMode(button4, INPUT);
}

void loop()
{
  lcd.clrScr();

  int score = 10;
  unsigned int lives = 7;
  boolean gameon = true;

  setCaption("Quiz machine");
  lcd.setBackColor(179, 232, 21);
  lcd.setColor(51, 184, 135);
  lcd.setFont(BigFont);
  lcd.print("Welcome!", CENTER, CENTER);
  lcd.setColor(151, 43, 194);
  lcd.setFont(SmallFont);
  lcd.print("<To start,", CENTER, 60);
  lcd.print("please push 2,3>", CENTER, 70);
  // lcd.lcdOff();
  while (true)
  {

    lcd.setColor(random(255), random(255), random(255));
    lcd.setFont(SmallFont);
    lcd.print("<To start,", CENTER, 60);
    lcd.print("please push 2,3>", CENTER, 70);
    lcd.setBackColor(random(255), random(255), random(255));
    lcd.setColor(random(255), random(255), random(255));
    lcd.setFont(BigFont);
    lcd.print("Welcome!", CENTER, CENTER);
    delay(200);
    if (digitalRead(button2) && digitalRead(button3))
    {
      break;
    }
  }
  int gamecycle = 0;
  while (gameon)
  {

    lcd.clrScr();
    gamecycle++;
    if (gamecycle > 4)
    {
      // Serial.print("asdf");
      level = 2;
    }
    if (gamecycle > 8)
    {
      // Serial.print("asdfasdf");
      level = 3;
      countdowntime = 3000;
    }
    if (gamecycle > 13)
    {
      // Serial.print("asdfasdfasdf");
      level = 4;
      // countdowntime = 2500;
    }
    if (gamecycle > 16)
    {
      level = 5;
      countdowntime = 7000;
    }
    if (gamecycle > 25)
    {
      level = 6;
      countdowntime = 10000;
    }

    String captionString = "";
    String operator_ = "";
    String quiz = "";
    int answer;
    int answernumber;
    int number1;
    int number2;
    switch (lives)
    {
    case 7:
      captionString = captionString + "lives left:///////";
      break;
    case 6:
      captionString = captionString + "lives left:////// ";
      break;
    case 5:
      captionString = captionString + "lives left://///  ";
      break;
    case 4:
      captionString = captionString + "lives left:////   ";
      break;
    case 3:
      captionString = captionString + "lives left:///    ";
      break;
    case 2:
      captionString = captionString + "lives left://     ";
      break;
    case 1:
      captionString = captionString + "lives left:/      ";
      break;
    case 0:
      captionString = captionString + "lives left:       ";
      gameon = false;

      lcd.setBackColor(72, 250, 223);
      lcd.setColor(72, 250, 223);
      lcd.fillRoundRect(5, 5, 155, 125);
      lcd.setBackColor(179, 232, 21);
      lcd.setColor(51, 184, 135);
      lcd.setFont(BigFont);
      lcd.drawBitmap(30, 0, 30, 30, gameover);
      lcd.print("GAME OVER!", CENTER, CENTER);
      lcd.setColor(242, 61, 255);
      lcd.setFont(SmallFont);
      lcd.print("Your Score:" + String(score), 10, 50);
      lcd.drawBitmap(0, 50, 15, 15, trophy);
      lcd.print("Game cycle: " + String(gamecycle), 10, 60);
      lcd.print("Wanna play again??", 10, 80);
      lcd.print("Please push ", 10, 100);
      lcd.print("reset.", 50, 110);

      while (true)
      {
      }
    }

    if (!gameon)
    {
      break;
    }

    setCaption(captionString);
    setCaption_iner("score:" + String(score));
    lcd.print("level:" + String(level), 100, 115);
    Serial.println("setting level...");
    Serial.print("currentlevel::");
    Serial.println(String(level));
    switch (level)
    {
    case 1:
      number1 = random(10);
      number2 = random(10);
      break;
    case 2:
      number1 = random(13);
      number2 = random(13);
      break;
    case 3:
      number1 = random(17);
      number2 = random(17);
      break;
    case 4:
      number1 = random(20);
      number2 = random(20);
      break;
    case 5:
      number1 = random(5, 25);
      number2 = random(5, 25);
    case 6:
      number1 = random(7, 35);
      number2 = random(7, 33);
    }
    Serial.println("setting operator...");
    switch (random(5))
    {
    case 0:
      operator_ = "+";
      answer = number2 + number1;
      break;
    case 1:
      operator_ = "-";
      answer = number2 - number1;
      break;
    case 2:
      operator_ = "*";
      answer = number2 * number1;
      break;
    case 3:
      if (level >= 5)
      {
        operator_ = "*";
        answer = number2 * number1;
      }
      else
      {
        operator_ = "+";
        answer = number2 + number1;
      }
      break;
    case 4:
      operator_ = "-";
      answer = number2 - number1;
      break;
    case 5:
      operator_ = "*";
      answer = number2 * number1;
      break;
    }
    //    quiz = number2 + "  " + operator_ + "  " + number1;
    quiz = quiz + String(number2);
    //    quiz = quiz + " ";
    quiz = quiz + operator_;
    //    quiz = quiz + " ";
    quiz = quiz + String(number1);

    Serial.println("setting choose number...");
    Serial.print("answer::");
    Serial.println(answer);

    switch (random(3))
    {
    case 0:

      Serial.println("case0");
      chansor1 = answer;

      chansor2 = answerfinder(answer, 1);

      chansor3 = answerfinder(answer, 2);

      chansor4 = answerfinder(answer, 3);
      answernumber = 1;
      break;

    case 1:
      Serial.println("case1");

      chansor1 = answerfinder(answer, 1);

      chansor2 = answer;

      chansor3 = answerfinder(answer, 2);

      chansor4 = answerfinder(answer, 3);

      answernumber = 2;
      break;
    case 2:
      Serial.println("case2");

      chansor1 = answerfinder(answer, 1);

      chansor2 = answerfinder(answer, 2);
      chansor3 = answer;

      chansor4 = answerfinder(answer, 3);

      answernumber = 3;
      break;

    case 3:
      Serial.println("case3");

      chansor1 = answerfinder(answer, 1);

      chansor2 = answerfinder(answer, 2);

      chansor3 = answerfinder(answer, 3);

      chansor4 = answer;
      answernumber = 4;
      break;
    }
    Serial.println("---------DEBUG-------------");
    Serial.print("chansor1::");
    Serial.println(chansor1);
    Serial.print("chansor2::");
    Serial.println(chansor2);
    Serial.print("chansor3::");
    Serial.println(chansor3);
    Serial.print("chansor4::");
    Serial.println(chansor4);

    Serial.println("----------------------");

    Serial.print("number1::");
    Serial.println(number1);
    Serial.print("number2::");
    Serial.println(number2);

    Serial.println("----------------------");

    Serial.print("answernumber::");
    Serial.println(answernumber);

    Serial.println("----------------------");

    Serial.print("quiz::");
    Serial.println(quiz);
    Serial.print("Answer::");
    Serial.println(answer);
    Serial.print("operator::");
    Serial.println(operator_);

    Serial.print("gamelevel::");
    Serial.println(level);
    Serial.print("gamecycle::");
    Serial.println(gamecycle);
    Serial.println("---------DEBUGEND-------------");

    switch (random(10))
    {

    case 5:
      special_quiz = true;
      break;

    default:
      special_quiz = false;
      break;
    }
    
    Serial.print("special_quiz::");Serial.println(special_quiz);

    lcd.setBackColor(random(1, 140), random(1, 140), random(1, 140));
    lcd.setFont(BigFont);
    lcd.setColor(255, 255, 255);
    //    lcd.setBackColor(
    //      103, 107, 89
    //    );
    lcd.drawBitmap(2, 30, 20, 20, qicon);
    lcd.print("Whats, ", CENTER + 10, 30);
    lcd.print(quiz, CENTER, 50);
    lcd.setBackColor(random(1, 140), random(1, 140), random(1, 140));
    lcd.setFont(SmallFont);
    lcd.print(String("1{" + String(chansor1) + " 2{" + String(chansor2)), 1, 70);
    lcd.print(String(" 3{" + String(chansor3) + " 4{" + String(chansor4)), 50, 90);
    if (special_quiz)
    {
      lcd.print("!SPECIAL!", 80, 80);
    }
    //    lcd.print("1{" + String(chansor1), 0, 80);
    //    lcd.print("2{" + String(chansor2), 40, 80);
    //    lcd.print("3{" + String(chansor3), 85, 80);
    //    lcd.print("4{" + String(chansor4), 130, 80);

    unsigned long countdownstart = millis();
    while (true)
    {
      lcd.setColor(255, 255, 255);
      lcd.setFont(SmallFont);
      lcd.print(String("Time left:" + String((countdowntime - (millis() - countdownstart)) / 1000)), 5, 115);
      // Serial.print("string debug:::");
      // Serial.println("Time left: " + String(countdowntime - (millis() - countdownstart)));
      if ((millis() - countdownstart) > countdowntime)
      {
        if (special_quiz)
        {
          score = score - 5;
        }
        lives = losescreen(answer, lives, score);
        break;
      }

      if (digitalRead(button1) || digitalRead(button2) || digitalRead(button3) || digitalRead(button4))
      {

        if (digitalRead(button1) && (answernumber == 1) || digitalRead(button2) && (answernumber == 2) || digitalRead(button3) && (answernumber == 3) || digitalRead(button4) && (answernumber == 4))
        {
          score = score + 1;
          if (special_quiz)
          {
            score = score + 4;
          }
          Serial.println("win");

          winscreen(score, lives);

          break;
        }
        // if (digitalRead(button2) && (answernumber == 2))
        // {
        //   score = score + 1;
        //   winscreen(score, lives);
        //   Serial.println("win");
        //   break;
        // }
        // if (digitalRead(button3) && (answernumber == 3))
        // {
        //   score = score + 1;
        //   Serial.println("win");
        //   winscreen(score, lives);
        //   break;
        // }
        // if (digitalRead(button4) && (answernumber == 4))
        // {
        //   score = score + 1;
        //   Serial.println("win");
        //   winscreen(score, lives);
        //   break;
        // }
        else
        {
          if (special_quiz)
          {
            score = score - 5;
          }
          lives = losescreen(answer, lives, score);
          break;
        }
      }
    }
    delay(50);
  }
}
void setCaption(String caption)
{
  lcd.setFont(SmallFont);
  lcd.setColor(255, 0, 0);
  lcd.fillRect(0, 0, 159, 25);
  lcd.setColor(64, 64, 64);
  lcd.fillRect(0, 114, 159, 127);
  lcd.setColor(255, 255, 255);
  lcd.setBackColor(255, 0, 0);
  lcd.print(caption, CENTER, 1);
}

void setCaption_iner(String caption)
{
  lcd.setFont(SmallFont);
  lcd.setColor(255, 255, 255);
  lcd.print(caption, CENTER, 13);
}

void winscreen(int score_, int lives)
{
  // clear_screen();
  lcd.setBackColor(72, 250, 223);
  lcd.setColor(72, 250, 223);
  lcd.fillRoundRect(5, 5, 155, 125);

  lcd.setColor(255, 255, 255);
  lcd.setBackColor(209, 75, 75);
  lcd.setFont(BigFont);
  lcd.print("<Correct!>", 0, 30);

  lcd.setFont(SmallFont);
  lcd.setColor(242, 199, 80);
  lcd.fillRoundRect(5, 70, 155, 125);
  lcd.setBackColor(28, 64, 38);
  lcd.setColor(185, 236, 250);
  lcd.drawBitmap(20, 75, 15, 15, heart);
  lcd.print(String(lives) + " lives left.", 40, 75);
  lcd.drawBitmap(20, 95, 15, 15, trophy);
  lcd.print("Score:" + String(score_), 40, 95);

  lcd.setFont(SmallFont);
  lcd.print("continue in 3 seconds...", 0, 110);

  for (int i = 3; i != 0; i--)
  {
    lcd.print("continue in " + String(i) + " seconds...", 0, 110);
    delay(500);
  }
}
unsigned int losescreen(int answer, int lives, int score_)
{
  // clear_screen();

  lcd.setBackColor(252, 81, 81);
  lcd.setColor(252, 81, 81);
  lcd.fillRoundRect(5, 5, 155, 125);

  Serial.print("state::");
  Serial.println(digitalRead(button1) || digitalRead(button2) || digitalRead(button3) || digitalRead(button4));
  score = score - 1;
  Serial.println("loose");
  lives = lives - 1;

  lcd.setColor(255, 255, 255);
  lcd.setBackColor(209, 75, 75);
  lcd.setFont(BigFont);
  lcd.print("<WRONG!>", 10, 10);
  lcd.setFont(SmallFont);
  lcd.print("The answer was::", 20, 30);
  lcd.setColor(255, 0, 0);
  lcd.setBackColor(255, 255, 255);
  lcd.setFont(BigFont);
  lcd.print(String(answer), 60, 45);
  lcd.setFont(SmallFont);

  lcd.setColor(242, 199, 80);
  lcd.fillRoundRect(5, 70, 155, 125);
  lcd.setBackColor(28, 64, 38);
  lcd.setColor(185, 236, 250);
  lcd.drawBitmap(20, 75, 15, 15, heart);
  lcd.print(String(lives) + " lives left.", 40, 75);
  lcd.drawBitmap(20, 95, 15, 15, trophy);
  lcd.print("Score:" + String(score_), 40, 95);

  lcd.setFont(SmallFont);
  lcd.print("continue in 1.5 seconds...", 0, 110);

  for (int i = 3; i != 0; i--)
  {
    lcd.print("continue in " + String(i) + " seconds...", 0, 110);
    delay(500);
  }
  return lives;
}

// function answerfinder
// INPUT: answer number, excute number
// OUTPUT: generates a random answer for choose

int answerfinder(int answer, int exnumber)
{
  int chansor = 1;
  // chansor = answer - random(15);
  while (true)
  {
    Serial.println(exnumber);
    switch (random(1, 4))
    {
    case 1:
      chansor = answer - random(20);
      break;
    case 2:
      chansor = answer + random(20);
      break;
    case 3:
      chansor = answer * random(1, 10);
      break;
    }
    if (answer == chansor)
    {
      Serial.println(chansor);
      Serial.println(answer == chansor);
      delay(50);
    }
    else
    {
      Serial.println(String(answer) + "--esc");
      break;
    }
  }
  return chansor;
}
